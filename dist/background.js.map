{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://betting-blocker/./src/background/background.ts"],"sourcesContent":["const blockedSites = [\"underdogfantasy.com\", \"prizepicks.com\"];\nlet timerActive = false;\nlet timerId = null;\n// Helper to update blocking rules\nconst updateBlockingRules = (shouldBlock) => {\n    chrome.declarativeNetRequest.updateEnabledRulesets({\n        enableRulesetIds: shouldBlock ? [\"block_betting_sites\"] : [],\n        disableRulesetIds: shouldBlock ? [] : [\"block_betting_sites\"],\n    });\n};\n// Initialize on load\nchrome.runtime.onInstalled.addListener(() => {\n    updateBlockingRules(true); // Block sites by default\n});\n// Restore state on extension start\nchrome.runtime.onStartup.addListener(() => {\n    chrome.storage.local.get([\"timerExpiration\"], (result) => {\n        const currentTime = Date.now();\n        const timerExpiration = result.timerExpiration || 0;\n        if (currentTime >= timerExpiration) {\n            // Timer expired, block sites\n            updateBlockingRules(true);\n            chrome.storage.local.remove(\"timerExpiration\");\n        }\n        else {\n            // Timer still active, unblock sites and set remaining timer\n            const remainingTime = timerExpiration - currentTime;\n            updateBlockingRules(false);\n            startTimer(remainingTime / 1000); // Convert ms to seconds\n        }\n    });\n});\n// Start a timer and persist its state\nconst startTimer = (durationSeconds) => {\n    const expirationTime = Date.now() + durationSeconds * 1000; // Calculate expiration time\n    chrome.storage.local.set({ timerExpiration: expirationTime });\n    updateBlockingRules(false); // Unblock sites\n    timerActive = true;\n    if (timerId)\n        clearTimeout(timerId); // Clear any existing timer\n    timerId = setTimeout(() => {\n        updateBlockingRules(true); // Re-block sites after timer\n        timerActive = false;\n        chrome.storage.local.remove(\"timerExpiration\");\n    }, durationSeconds * 1000);\n};\n// Listen for messages\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"startTimer\" && !timerActive) {\n        startTimer(message.duration);\n    }\n    else if (message.action === \"timerExpired\") {\n        if (timerId) {\n            clearTimeout(timerId);\n            timerId = null;\n        }\n        updateBlockingRules(true);\n        timerActive = false;\n        chrome.storage.local.remove(\"timerExpiration\");\n    }\n});\n"],"names":[],"sourceRoot":""}