{"version":3,"file":"background.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://betting-blocker/./src/background/background.ts"],"sourcesContent":["const blockedSites = [\"underdogfantasy.com\", \"prizepicks.com\"];\nlet timerActive = false;\nlet timerId = null;\nconst updateBlockingRules = (shouldBlock) => {\n    chrome.declarativeNetRequest.updateEnabledRulesets({\n        enableRulesetIds: shouldBlock ? [\"block_betting_sites\"] : [],\n        disableRulesetIds: shouldBlock ? [] : [\"block_betting_sites\"],\n    });\n    console.log(\"Blocking rules updated:\", shouldBlock ? \"Block\" : \"Unblock\");\n};\nchrome.runtime.onInstalled.addListener(() => {\n    updateBlockingRules(true);\n});\nchrome.runtime.onStartup.addListener(() => {\n    chrome.storage.local.get([\"timerExpiration\"], (result) => {\n        const currentTime = Date.now();\n        const timerExpiration = result.timerExpiration || 0;\n        if (currentTime >= timerExpiration) {\n            updateBlockingRules(true);\n            chrome.storage.local.remove(\"timerExpiration\");\n        }\n        else {\n            const remainingTime = timerExpiration - currentTime;\n            updateBlockingRules(false);\n            startTimer(remainingTime / 1000);\n        }\n    });\n});\nconst startTimer = (durationSeconds) => {\n    if (timerActive)\n        return; // Prevent multiple active timers\n    if (timerId)\n        clearTimeout(timerId); // Clear any existing timer\n    const expirationTime = Date.now() + durationSeconds * 1000;\n    chrome.storage.local.set({ timerExpiration: expirationTime });\n    updateBlockingRules(false);\n    timerActive = true;\n    timerId = setTimeout(() => {\n        timerId = null;\n        timerActive = false;\n        updateBlockingRules(true);\n        chrome.storage.local.remove(\"timerExpiration\", () => {\n            console.log(\"Timer expired, sites re-blocked\");\n            chrome.runtime.reload(); // Reload the extension when the timer ends\n        });\n    }, durationSeconds * 1000);\n    console.log(\"Timer started for:\", durationSeconds, \"seconds\");\n};\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    if (message.action === \"startTimer\" && !timerActive) {\n        startTimer(message.duration);\n        sendResponse({ success: true });\n    }\n    else if (message.action === \"timerExpired\") {\n        if (timerId) {\n            clearTimeout(timerId);\n            timerId = null;\n        }\n        updateBlockingRules(true);\n        timerActive = false;\n        chrome.storage.local.remove(\"timerExpiration\");\n        sendResponse({ success: true });\n    }\n    else if (message.action === \"getBlockedSites\") {\n        sendResponse({ blockedSites });\n    }\n    else {\n        sendResponse({ error: \"Unknown action\" });\n    }\n    return true;\n});\n// Function to reload the extension\nfunction reloadExtension() {\n    chrome.runtime.reload();\n}\n// Set an interval to reload the extension every 5 minutes (300,000 milliseconds)\nsetInterval(reloadExtension, 300000);\n"],"names":[],"sourceRoot":""}